/**
 * Conservative sources download task - targets main classpaths only
 * Compatible with Gradle 4-8
 */
task konveyorDownloadSources {
    doLast {
        def allSourceFiles = []

        allprojects { project ->
            println "Processing project: ${project.name}"

            // Focus on main classpaths that are typically resolvable
            def targetConfigs = [
                    'compileClasspath',
                    'runtimeClasspath',
                    'implementation',
                    'api'
            ].findAll { configName ->
                project.configurations.findByName(configName)?.canBeResolved ?: false
            }

            targetConfigs.each { configName ->
                try {
                    def config = project.configurations.getByName(configName)
                    println "  Processing configuration: ${configName}"

                    // Get resolved dependencies
                    def resolvedConfig = config.resolvedConfiguration
                    def dependencies = resolvedConfig.resolvedArtifacts

                    // Extract module identifiers for source resolution
                    def moduleIds = dependencies.collect { artifact ->
                        artifact.moduleVersion.id
                    }.unique()

                    if (!moduleIds.isEmpty()) {
                        println "    Found ${moduleIds.size()} unique modules"

                        // Query for sources using the dependency notation
                        moduleIds.each { moduleId ->
                            try {
                                def sourceDep = project.dependencies.create(
                                        group: moduleId.group,
                                        name: moduleId.name,
                                        version: moduleId.version,
                                        classifier: 'sources'
                                )

                                def sourceConfig = project.configurations.detachedConfiguration(sourceDep)
                                sourceConfig.transitive = false

                                def sourceFiles = sourceConfig.resolve()
                                if (!sourceFiles.isEmpty()) {
                                    allSourceFiles.addAll(sourceFiles)
                                    println "      Found sources for ${moduleId}"
                                }
                            } catch (Exception e) {
                                // Sources not available for this dependency, continue
                                println "      No sources available for ${moduleId}"
                            }
                        }
                    }
                } catch (Exception e) {
                    println "    Error processing ${configName}: ${e.message}"
                }
            }
        }

        // Copy all found source files
        if (!allSourceFiles.isEmpty()) {
            def downloadDir = new File(buildDir, "download")
            downloadDir.mkdirs()

            copy {
                from allSourceFiles
                into downloadDir
                duplicatesStrategy = "exclude"
            }

            println "Downloaded ${allSourceFiles.size()} source files to ${downloadDir}"
        } else {
            println "No source files found to download"
        }
    }
}

